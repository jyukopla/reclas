<rules xmlns="http://namespaces.plone.org/diazo"
       xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <!-- 'theme' is the node with data-tile="" -->
  <!-- 'content' is the /body node the tile  -->

  <replace theme="/*">
    <div>
      <xsl:apply-templates select="/body/*[node()]" />
    </div>
  </replace>

  <replace content="/body/div[@class='portletWrapper']">
    <xsl:apply-templates />
  </replace>

  <replace content="/body/div/aside[contains(@class, 'portletNavigationTree')]">
    <xsl:for-each select="nav">
      <nav>
        <xsl:choose>
          <xsl:when test="not(//li[contains(@class, 'navTreeCurrentNode')])">
            <xsl:attribute name="class">
              <xsl:text>has-current pat-hyphenate</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="data-pat-hyphenate">
              <xsl:text>selector:a</xsl:text>
            </xsl:attribute>
          </xsl:when>
          <xsl:otherwise>
            <xsl:attribute name="class">
              <xsl:text>pat-hyphenate</xsl:text>
            </xsl:attribute>
            <xsl:attribute name="data-pat-hyphenate">
              <xsl:text>selector:a</xsl:text>
            </xsl:attribute>
          </xsl:otherwise>
        </xsl:choose>
        <xsl:apply-templates select="ul" />
      </nav>
    </xsl:for-each>
  </replace>

  <xsl:template match="ul[contains(@class, 'navTree')]">
    <ul>
      <xsl:apply-templates select="li" />
    </ul>
  </xsl:template>

  <xsl:template match="li[contains(@class, 'navTreeItem')]">
    <li>
      <xsl:apply-templates select="@*" />
      <xsl:if test="not(contains(@class, 'navTreeCurrentNode')
                        or contains(@class, 'navTreeItemInPath')
                        or contains(@class, 'navTreeTopNode'))">
        <xsl:attribute name="class">
          <xsl:text>collapsed</xsl:text>
        </xsl:attribute>
      </xsl:if>
      <xsl:for-each select="a|div/a">
        <a>
          <xsl:apply-templates select="@*" />
          <i class="fa fa-chevron-left" />
          <xsl:apply-templates select="node()" />
        </a>
      </xsl:for-each>
      <xsl:apply-templates select="ul" />
    </li>
  </xsl:template>

</rules>
